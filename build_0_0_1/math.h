#pragma once
#ifndef MATH
#define MATH

#define PI 3.1415926535898
#define LNE 2.718281828459

const static double tritable[26][3]
=
{
	180.0,0.0,1.0,
	90.0,1.0,0.0,
	45.0,0.70710678118654752440084436210485,0.70710678118654752440084436210485,
	22.5,0.3826834323650897717284599840304,0.92387953251128675612818318939679,
	11.25,0.19509032201612826784828486847702,0.98078528040323044912618223613424,
	5.625,0.09801714032956060199419556388864,0.99518472667219688624483695310948,
	2.8125,0.04906767432741801425495497694268,0.9987954562051723927147716047591,
	1.40625,0.02454122852291228803173452945928,0.99969881869620422011576564966617,
	0.703125,0.012271538285719926079408261951,0.99992470183914454092164649119638,
	0.3515625,0.00613588464915447535964023459037,0.99998117528260114265699043772857,
	0.17578125,0.00306795676296597627014536549092,0.99999529380957617151158012570012,
	0.087890625,0.00153398018628476561230369715026,0.99999882345170190992902571017153,
	0.0439453125,0.00076699031874270452693856835794858,0.99999970586288221916022821773877,
	0.02197265625,0.00038349518757139558907246168118138,0.99999992646571785114473148070739,
	0.010986328125,0.000191747597310703307439909561989,0.99999998161642929380834691540291,
	0.0054931640625,0.000095873799095977345870517210976476,0.99999999540410731289097193313961,
	0.00274658203125,0.000047936899603066884549003990494659,0.99999999885102682756267330779455,
	0.001373291015625,0.000023968449808418218729186577165022,0.99999999971275670684941397221864,
	0.0006866455078125,0.000011984224905069706421521561596989,0.99999999992818917670977509588385,
	0.00034332275390625,0.0000059921124526424278428797118088909,0.99999999998204729417728262414778,
	0.000171661376953125,0.0000029960562263346607504548128083571,0.999999999995511823544310584173,
	0.0000858306884765625,1.4980281131690112288542788461554e-6,0.99999999999887795588607701655175,
	0.00004291534423828125,7.4901405658471572113049856673066e-7,0.99999999999971948897151921479472,
	0.000021457672119140625,3.7450702829238412390316917908463e-7,0.99999999999992987224287980123973,
	0.0000107288360595703125,1.8725351414619534486882457659356e-7,0.99999999999998246806071995015625,
	0.00000536441802978515625,9.3626757073098082799067286680886e-8,0.99999999999999561701517998752946
};

long tardy_abs(long n)
{
	if (n < 0)
		return -n;
	else
		return n;
}
double tardy_fabs(double n)
{
	if (n < 0)
		return -n;
	else
		return n;
}
double tardy_pow(double n, int x)
{
	double result=1.0;
	while (x-->0)
		result *= n;
	return result;
}
double tardy_exp(int n)
{
	double result=1.0;
	while (n-->0)
		result *= LNE;
	return result;
}
double tardy_sqrt(double n)
{
	double val = n; //最终
	double last; //保存上一个计算的值
	if (n >= 0)
	{
		do
		{
			last = val;
			val = (val + n / val) * 0.5;
		} while (val - last < -10e-6 || val - last > 10e-6);
	}
	else
	{
		return 1e300*1e300*0.0;
	}
	return val;
}
double tardy_sin(double n)
{
	int i;
	int k = 1;
	double sum = 0.0;
	double sin = 0.0;
	double cos = 1.0;
	double sintemp;
	double costemp;

	if (n < 0)
	{
		n = -n;
		k *= -1;
	}
	while (n > 360)
	{
		n -= 360;
	}
	if (n>180)
	{
		k *= -1;
	}
	for (i = 0; i <26; ++i)
	{
		if (sum + tritable[i][0] <= n)
		{
			sum += tritable[i][0];
			sintemp = sin*tritable[i][2] + cos*tritable[i][1];
			costemp = cos*tritable[i][2] - sin*tritable[i][1];
			sin = sintemp;
			cos = costemp;
		}
	}
	return k*sin;
}

double tardy_cos(double n)
{
	int i;
	int k = 1;
	double sum = 0.0;
	double sin = 1.0;
	double cos = 0.0;
	double sintemp;
	double costemp;
	if (n < 0)
	{
		n = -n;
	}
	while (n > 360)
	{
		n -= 360;
	}
	if (n>180)
	{
		k *= -1;
	}
	for (i = 0; i <26; ++i)
	{
		if (sum + tritable[i][0] <= n)
		{
			sum += tritable[i][0];
			sintemp = sin*tritable[i][2] + cos*tritable[i][1];
			costemp = cos*tritable[i][2] - sin*tritable[i][1];
			sin = sintemp;
			cos = costemp;
		}
	}
	return k*cos;
}


double tardy_tan(double n)
{
	int i;
	int k = 1;
	double sum = 0.0;
	double sin = 0.0;
	double cos = 1.0;
	double sintemp;
	double costemp;
	if (n < 0)
	{
		n = -n;
		k *= -1;
	}
	while (n > 360)
	{
		n -= 360;
	}
	for (i = 0; i <26; ++i)
	{
		if (sum + tritable[i][0] <= n)
		{
			sum += tritable[i][0];
			sintemp = sin*tritable[i][2] + cos*tritable[i][1];
			costemp = cos*tritable[i][2] - sin*tritable[i][1];
			sin = sintemp;
			cos = costemp;
		}
	}
	return k*sin/cos;
}




#endif // !MATH
